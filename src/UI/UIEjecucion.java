package UI;

import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JLabel;
import javax.swing.JTextField;
import logica.OS;
import logica.Proceso;

public class UIEjecucion extends javax.swing.JFrame {
    
        //Celdas de memoria
    public static JTextField[] celdas;
        //Proceso en visualización
    private static Proceso actual;
    private static boolean seeing = false;
        //Label de celdas de memoria
    public static JLabel[] labelCeldas;
    private static JLabel[] idProcesos;
    private static JLabel[] pagSelecProc;
        //Label de procesos
    public static double disMs;
    public static double disMp;
    
    public UIEjecucion() {
        
        initComponents();
        
        this.setVisible(true);
        
        int posX = this.mempLabel.getX()+20;
        int posY = this.mempLabel.getY()+40;
        double tamMarco = OS.getTamMarco();
        
        for(int i=0;i<UIEjecucion.celdas.length;i++){
            UIEjecucion.celdas[i].setFocusable(false);
            UIEjecucion.labelCeldas[i] = new JLabel();
            UIEjecucion.labelCeldas[i].setText(""+i);
            getContentPane().add(UIEjecucion.celdas[i], new org.netbeans.lib.awtextra.AbsoluteConstraints(posX, posY, 100, 20));
            getContentPane().add(UIEjecucion.labelCeldas[i], new org.netbeans.lib.awtextra.AbsoluteConstraints(posX-20, posY, 25, 20));
            posY+=20;
            if(i % 32 == 31){
                posX+=125;
                posY-=(32*20);
            }
        }
        this.setSize(posX+230 , ((this.mempLabel.getY()+90+(32*20))));
        
        double aux = OS.getTamMP();
        if(aux/(1024*1024)>=1){
            aux = (aux/(1024*1024));
                //Está en Mbytes
            this.mempLabel.setText("Memoria Principal: "+aux+" Mb");
        }else{
            aux = (aux/1024);
                //Está en Kbytes
            this.mempLabel.setText("Memoria Principal: "+aux+" Kb");
        }
        
        aux = OS.getTamMarco();
        if(aux/(1024*1024)>=1){
            aux = (aux/(1024*1024));
                //Está en Mbytes
            this.marcoLabel.setText("Tamaño del Marco: "+aux+" Mb");
        }else{
            aux = (aux/1024);
                //Está en Kbytes
            this.marcoLabel.setText("Tamaño del Marco: "+aux+" Kb");
        }
        
        aux = OS.getTamMS();
        if(aux/(1024*1024*1024)>=1){
            aux = (aux/(1024*1024*1024));
                //Está en Gbytes
            this.memsLabel.setText("Memoria Secundaria: "+aux+" Gb");
        }else{
            aux = aux/(1024*1024);
                //Está en Mbytes
            this.memsLabel.setText("Memoria Secundaria: "+aux+" Mb");
        }
        
        UIEjecucion.disMsLabel.setText("Espacio disponible: "+(UIEjecucion.disMs/(1024*1024))+" Mb");
        this.updateProcessIds();
        OS.startSimul();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel3 = new javax.swing.JLabel();
        procesosLabel = new javax.swing.JLabel();
        mempLabel = new javax.swing.JLabel();
        marcoLabel = new javax.swing.JLabel();
        memsLabel = new javax.swing.JLabel();
        elimnLabel = new javax.swing.JLabel();
        elimnField = new javax.swing.JTextField();
        eliminar = new javax.swing.JButton();
        suspLabel = new javax.swing.JLabel();
        suspField = new javax.swing.JTextField();
        susp = new javax.swing.JButton();
        addLabel = new javax.swing.JLabel();
        idLabel = new javax.swing.JLabel();
        idField = new javax.swing.JTextField();
        tamLabel = new javax.swing.JLabel();
        tamField = new javax.swing.JTextField();
        agregar = new javax.swing.JButton();
        disMsLabel = new javax.swing.JLabel();
        verLabel = new javax.swing.JLabel();
        ver = new javax.swing.JButton();
        verField = new javax.swing.JTextField();
        volver = new javax.swing.JButton();
        selectProcLabel = new javax.swing.JLabel();
        selectNumPag = new javax.swing.JLabel();
        selectEstado = new javax.swing.JLabel();
        selectFrag = new javax.swing.JLabel();
        selectTam = new javax.swing.JLabel();
        unitProTam = new javax.swing.JComboBox<>();
        disMpLabel = new javax.swing.JLabel();

        jLabel3.setText("jLabel3");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        procesosLabel.setText("Procesos: ");
        getContentPane().add(procesosLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 60, 20));

        mempLabel.setText("Memoria Principal:");
        getContentPane().add(mempLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 10, 230, 20));

        marcoLabel.setText("Tamaño del Marco:");
        getContentPane().add(marcoLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 10, 220, 20));

        memsLabel.setText("Memoria Secundaria:");
        getContentPane().add(memsLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 10, 230, 20));

        elimnLabel.setText("Eliminar por ID:");
        getContentPane().add(elimnLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 610, 130, 20));
        getContentPane().add(elimnField, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 610, 140, -1));

        eliminar.setText("Eliminar");
        eliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eliminarActionPerformed(evt);
            }
        });
        getContentPane().add(eliminar, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 610, 90, -1));

        suspLabel.setText("Suspender por ID:");
        getContentPane().add(suspLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 550, 130, 20));
        getContentPane().add(suspField, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 550, 140, -1));

        susp.setText("Suspender");
        susp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                suspActionPerformed(evt);
            }
        });
        getContentPane().add(susp, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 550, 90, -1));

        addLabel.setText("Añadir:");
        getContentPane().add(addLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 460, 60, 20));

        idLabel.setText("ID:");
        getContentPane().add(idLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 490, 50, 20));
        getContentPane().add(idField, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 490, 240, -1));

        tamLabel.setText("Tamaño del proceso:");
        getContentPane().add(tamLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 520, 120, 20));

        tamField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                tamFieldKeyTyped(evt);
            }
        });
        getContentPane().add(tamField, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 520, 160, -1));

        agregar.setText("Añadir");
        agregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                agregarActionPerformed(evt);
            }
        });
        getContentPane().add(agregar, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 490, 80, -1));

        disMsLabel.setText("Espacio disponible:");
        getContentPane().add(disMsLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 30, 230, 20));

        verLabel.setText("Ver por ID:");
        getContentPane().add(verLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 580, 130, 20));

        ver.setText("Ver Datos");
        ver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                verActionPerformed(evt);
            }
        });
        getContentPane().add(ver, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 580, 90, -1));
        getContentPane().add(verField, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 580, 140, -1));

        volver.setText("Volver");
        volver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                volverActionPerformed(evt);
            }
        });
        getContentPane().add(volver, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 550, 90, -1));
        getContentPane().add(selectProcLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 210, 20));
        getContentPane().add(selectNumPag, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 90, 210, 20));
        getContentPane().add(selectEstado, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 50, 210, 20));
        getContentPane().add(selectFrag, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 70, 210, 20));
        getContentPane().add(selectTam, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 30, 210, 20));

        unitProTam.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Kb", "Mb" }));
        getContentPane().add(unitProTam, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 520, -1, -1));

        disMpLabel.setText("Espacio disponible:");
        getContentPane().add(disMpLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 30, 220, 20));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public static void visibleProcessIds(boolean show){
        for(int i=0;i<UIEjecucion.idProcesos.length;i++){
            UIEjecucion.idProcesos[i].setVisible(show);
        }
    }

    private void modifVer(boolean show){
        UIEjecucion.visibleProcessIds(show);
        this.addLabel.setVisible(show);
        this.idLabel.setVisible(show);
        this.tamLabel.setVisible(show);
        this.suspLabel.setVisible(show);
        this.verLabel.setVisible(show);
        this.procesosLabel.setVisible(show);
        this.elimnLabel.setVisible(show);
        this.unitProTam.setVisible(show);
            //Ocultar botones
        this.agregar.setVisible(show);
        this.susp.setVisible(show);
        this.ver.setVisible(show);
        this.eliminar.setVisible(show);
            //Ocultar Fields
        this.idField.setVisible(show);
        this.tamField.setVisible(show);
        this.suspField.setVisible(show);
        this.verField.setVisible(show);
        this.elimnField.setVisible(show);
            //Mostrar Labels
        this.selectNumPag.setVisible(!show);
        this.selectProcLabel.setVisible(!show);
        this.selectEstado.setVisible(!show);
        this.selectFrag.setVisible(!show);
        this.selectTam.setVisible(!show);
        this.selectFrag.setVisible(!show);
            //Mostrar botones
        this.volver.setVisible(!show);
    }
    
    private void updateProcessIds(){
        if(idProcesos != null){
            for(int i=0;i<UIEjecucion.idProcesos.length;i++){
                    UIEjecucion.idProcesos[i].setVisible(false);
            }
        }
        Object[] aux = OS.procesos.toArray();
        UIEjecucion.idProcesos = new JLabel[OS.procesos.size()];
        int posY = UIEjecucion.procesosLabel.getY()+20;
        for(int i=0;i<UIEjecucion.idProcesos.length;i++){
                UIEjecucion.idProcesos[i] = new JLabel();
                UIEjecucion.idProcesos[i].setText("ID: "+(((Proceso)aux[i]).getIdP())+" Estado: "+OS.getEstadoProceso((((Proceso)aux[i]).getIdP())));
                UIEjecucion.idProcesos[i].setVisible(true);
                getContentPane().add(UIEjecucion.idProcesos[i], new org.netbeans.lib.awtextra.AbsoluteConstraints(this.procesosLabel.getX(), posY, 200, 30));
                posY+=20;
        }
    }
    
    public static void updateProcessIDs(){
        if(!UIEjecucion.seeing){
            if(!OS.procesos.isEmpty()){
                Object[] aux = OS.procesos.toArray();
                for(int i=0;i<UIEjecucion.idProcesos.length;i++){
                    if(UIEjecucion.idProcesos[i]!=null){
                        if(!(i>(aux.length-1)) && !((Proceso)aux[i]).getIdP().equals("Eliminado")){
                            UIEjecucion.idProcesos[i].setText("ID: "+(((Proceso)aux[i]).getIdP())+" Estado: "+OS.getEstadoProceso((((Proceso)aux[i]).getIdP())));
                            UIEjecucion.idProcesos[i].setVisible(true);
                        }else{
                            if(UIEjecucion.idProcesos[i] != null){
                                UIEjecucion.idProcesos[i].setText("");
                                UIEjecucion.idProcesos[i].setVisible(false);
                            }
                        }
                    }
                }
            }
        }else{
            UIEjecucion.selectEstado.setText(""+OS.getEstadoProceso(UIEjecucion.actual.getIdP()));
            for(int i=0;i<UIEjecucion.pagSelecProc.length;i++){
                UIEjecucion.pagSelecProc[i].setText(i+": ");
                if((UIEjecucion.actual.getETP(i)).getP()){
                    UIEjecucion.pagSelecProc[i].setText(UIEjecucion.pagSelecProc[i].getText()+" En: "+(UIEjecucion.actual.getETP(i).getMarco()*OS.getTamMarco()));
                }else{
                    UIEjecucion.pagSelecProc[i].setText(UIEjecucion.pagSelecProc[i].getText()+" En disco");
                }
            }   
        }
    }
    
    private void updateSelectProcPag(){
        UIEjecucion.pagSelecProc = new JLabel[UIEjecucion.actual.getCantidadPag()];
        int posX = this.selectNumPag.getX();
        int posY = this.selectNumPag.getY()+20;
        for(int i=0;i<UIEjecucion.pagSelecProc.length;i++){
            UIEjecucion.pagSelecProc[i] = new JLabel();
            UIEjecucion.pagSelecProc[i].setText(i+": ");
            if((UIEjecucion.actual.getETP(i)).getP()){
                UIEjecucion.pagSelecProc[i].setText(UIEjecucion.pagSelecProc[i].getText()+" En: "+(UIEjecucion.actual.getETP(i).getMarco()*OS.getTamMarco()));
            }else{
                UIEjecucion.pagSelecProc[i].setText(UIEjecucion.pagSelecProc[i].getText()+" En disco");
            }
            getContentPane().add(UIEjecucion.pagSelecProc[i], new org.netbeans.lib.awtextra.AbsoluteConstraints(posX, posY, 200, 30));
            posY+=20;
            UIEjecucion.pagSelecProc[i].setVisible(true);
            if(i % 28 == 27){
                posX+=125;
                posY-=(28*20);
            }
        }
    }
    
    private void hidePagDeProc(){
        for(int i=0;i<UIEjecucion.pagSelecProc.length;i++){
            UIEjecucion.pagSelecProc[i].setVisible(false);
        }
    }
       
    private void agregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_agregarActionPerformed
            //Validar campos llenos
        if((this.idField.getText().length()>0)&&(this.tamField.getText().length()>0)){
            if(OS.getProceso(this.idField.getText()) == null){
                    //Parte entera de la división
                double aux = Integer.parseInt(this.tamField.getText());
                String probar = this.idField.getText();
                if(aux <= 0){
                    System.out.println("Add JOptionPane de tamaño proceso negativo");
                    return;
                }
                try {
                    String aux2 = this.unitProTam.getItemAt(this.unitProTam.getSelectedIndex());
                        
                    if(aux2.equals("Mb")){
                        aux = (aux*1024*1024); //Pasar de Mb a bytes
                    }else{
                        aux = (aux*1024); //Pasar de Kb a bytes
                    }
                    OS.crearProceso(probar, aux);
                    this.idField.setText("");
                    this.tamField.setText("");
                    UIEjecucion.disMsLabel.setText("Espacio disponible: "+(UIEjecucion.disMs/(1024*1024))+" Mb");
                    this.updateProcessIds();
                } catch (InterruptedException ex) {
                    Logger.getLogger(UIEjecucion.class.getName()).log(Level.SEVERE, null, ex);
                }
            }else{
                System.out.println("Add JOptionPane para id repetido");
            }
        }else{
            System.out.println("Add JOptionPane para Campos inválidos");
        }
    }//GEN-LAST:event_agregarActionPerformed

    private void volverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_volverActionPerformed
        this.modifVer(true);
        this.hidePagDeProc();
        UIEjecucion.seeing = false;
        UIEjecucion.updateProcessIDs();
        this.verField.setText("");
    }//GEN-LAST:event_volverActionPerformed

    private void verActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_verActionPerformed
        if(this.verField.getText().length() > 0){
            UIEjecucion.actual = OS.getProceso(this.verField.getText());
            if(UIEjecucion.actual!=null){
                    //Ocultar labels
                UIEjecucion.seeing = true;
                this.updateSelectProcPag();
                this.modifVer(false);                
                    //Editar texto
                this.selectNumPag.setText("Páginas totales: "+UIEjecucion.actual.getCantidadPag());
                if(UIEjecucion.actual.getTam()/(1024*1024) >= 1){
                    this.selectTam.setText("Tamaño: "+(UIEjecucion.actual.getTam()/(1024*1024))+" Mb");
                }else{
                    this.selectTam.setText("Tamaño: "+(UIEjecucion.actual.getTam()/1024)+" Kb");
                }
                this.selectProcLabel.setText("ID: "+UIEjecucion.actual.getIdP());
                UIEjecucion.selectEstado.setText(""+OS.getEstadoProceso(UIEjecucion.actual.getIdP()));
                if(UIEjecucion.actual.getFrag() < 1024){
                    this.selectFrag.setText("Fragmentación: "+UIEjecucion.actual.getFrag()+" bytes");
                }else if(UIEjecucion.actual.getFrag()/1024 < 1024){
                    this.selectFrag.setText("Fragmentación: "+(UIEjecucion.actual.getFrag()/1024)+" Kb");
                }else{
                    this.selectFrag.setText("Fragmentación: "+(UIEjecucion.actual.getFrag()/(1024*1024))+" Mb");
                }
            }else{
                System.out.println("Add JOptionPane para fallo en búsqueda");
            }
        }else{
            System.out.println("Add JOptionPane para campos inválidos");
        }
    }//GEN-LAST:event_verActionPerformed

    private void eliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eliminarActionPerformed
        if(this.elimnField.getText().length() > 0){
            Proceso p = OS.getProceso(this.elimnField.getText());
            if(p!=null){
                try {
                    OS.eliminarProceso(p);
                } catch (InterruptedException ex) {
                    Logger.getLogger(UIEjecucion.class.getName()).log(Level.SEVERE, null, ex);
                }
                this.updateProcessIds();
                this.elimnField.setText("");
                UIEjecucion.disMsLabel.setText("Espacio disponible: "+(UIEjecucion.disMs/(1024*1024))+" Mb");
            }else{
                System.out.println("Add JOptionPane para fallo en búsqueda");
            }
        }else{
            System.out.println("Add JOptionPane para campos inválidos");
        }
    }//GEN-LAST:event_eliminarActionPerformed

    private void tamFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tamFieldKeyTyped
        char aux = evt.getKeyChar();
        if(Character.isLetter(aux)){
            evt.consume();
            System.out.println("Add JOption de presionaste un char");
            return;
        }
    }//GEN-LAST:event_tamFieldKeyTyped

    private void suspActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_suspActionPerformed
        if(this.suspField.getText().length() > 0){
            Proceso p = OS.getProceso(this.suspField.getText());
            if(p!=null){
                try {
                    OS.suspenderProceso(p);
                } catch (InterruptedException ex) {
                    Logger.getLogger(UIEjecucion.class.getName()).log(Level.SEVERE, null, ex);
                }
                this.updateProcessIds();
                UIEjecucion.updateProcessIDs();
                this.suspField.setText("");
            }else{
                System.out.println("Add JOptionPane para fallo en búsqueda");
            }
        }else{
            System.out.println("Add JOptionPane para campos inválidos");
        }
    }//GEN-LAST:event_suspActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel addLabel;
    private javax.swing.JButton agregar;
    public static javax.swing.JLabel disMpLabel;
    public static javax.swing.JLabel disMsLabel;
    private javax.swing.JButton eliminar;
    private javax.swing.JTextField elimnField;
    private javax.swing.JLabel elimnLabel;
    private javax.swing.JTextField idField;
    private javax.swing.JLabel idLabel;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel marcoLabel;
    private javax.swing.JLabel mempLabel;
    private javax.swing.JLabel memsLabel;
    private static javax.swing.JLabel procesosLabel;
    private static javax.swing.JLabel selectEstado;
    private javax.swing.JLabel selectFrag;
    private javax.swing.JLabel selectNumPag;
    private javax.swing.JLabel selectProcLabel;
    private javax.swing.JLabel selectTam;
    private javax.swing.JButton susp;
    private javax.swing.JTextField suspField;
    private javax.swing.JLabel suspLabel;
    private javax.swing.JTextField tamField;
    private javax.swing.JLabel tamLabel;
    private javax.swing.JComboBox<String> unitProTam;
    private javax.swing.JButton ver;
    private javax.swing.JTextField verField;
    private javax.swing.JLabel verLabel;
    private javax.swing.JButton volver;
    // End of variables declaration//GEN-END:variables
}
